concurrency:
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

  group: '${{ github.workflow }} - ${{ github.head_ref || github.ref }}'
defaults:
  run:
    shell: bash

env:
  PRIMARY_NODE_VERSION: 20

#
# Workflow for how the CI spawns jobs:
# 1) Run the install and cache the install artefacts
# 2) Run the build and cache the output
#    - In parallel we also any steps that don't need the build (like prettier)
# 3) Run the steps that depend on the build
#

jobs:
  build:
    name: Build All Packages
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare-install
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Build
        uses: ./.github/actions/prepare-build

  install:
    name: Checkout and Install
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare-install
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

  lint_with_build:
    name: Lint with build
    # because we lint with our own tooling, we need to build
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare-install
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}
      - name: Build
        uses: ./.github/actions/prepare-build

      - env:
          ESLINT_USE_FLAT_CONFIG: true
        name: Run Check
        run: pnpm run ${{ matrix.lint-task }}
    strategy:
      matrix:
        lint-task: ['knip', 'lint', 'typecheck']

  lint_without_build:
    name: Lint without build
    needs: [install]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install
        uses: ./.github/actions/prepare-install
        with:
          node-version: ${{ env.PRIMARY_NODE_VERSION }}

      - name: Run Check
        run: pnpm run ${{ matrix.lint-task }}
    strategy:
      matrix:
        lint-task: ['check-format', 'check-spelling']

  unit_tests:
    env:
      COLLECT_COVERAGE: false
    name: Run Unit Tests
    needs: [build]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Install
        uses: ./.github/actions/prepare-install
        with:
          node-version: ${{ matrix.node-version }}
      - name: Build
        uses: ./.github/actions/prepare-build

      # collect coverage on the primary node version
      # we don't collect coverage on other node versions so they run faster
      # note that we don't do this as a single `run` with a flag because some
      # packages don't collect coverage on purpose, so forcing `--coverage=true`
      # would override the config
      - env:
          CI: true
        if: env.PRIMARY_NODE_VERSION == matrix.node-version && matrix.os == 'ubuntu-latest'
        name: Run unit tests with coverage for ${{ matrix.package }}
        run: pnpm run test ${{ matrix.package }}
      - env:
          CI: true

        if: env.PRIMARY_NODE_VERSION != matrix.node-version || matrix.os != 'ubuntu-latest'
        name: Run unit tests for ${{ matrix.package }}
        run: pnpm run test ${{ matrix.package }} --coverage=false
      - if: env.PRIMARY_NODE_VERSION == matrix.node-version && matrix.os == 'ubuntu-latest'
        name: Store coverage for uploading
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.package }}-coverage
          path: packages/${{ matrix.package }}/coverage/lcov.info
          # Sadly 1 day is the minimum
          retention-days: 1
    strategy:
      matrix:
        exclude:
          - node-version: 18
            os: windows-latest
        # just run on the oldest and latest supported versions and assume the intermediate versions are good
        node-version: [18, 20]
        os: [ubuntu-latest, windows-latest]
        package:
          [
            'ast-spec',
            'eslint-plugin',
            'eslint-plugin-internal',
            'parser',
            'rule-schema-to-typescript-types',
            'rule-tester',
            'scope-manager',
            'type-utils',
            'typescript-eslint',
            'typescript-estree',
            'utils',
            'visitor-keys',
          ]

name: CI

on:
  merge_group:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main

permissions:
  contents: read # to fetch code (actions/checkout)


  # upload_coverage:
  #   name: Upload Codecov Coverage
  #   needs: [unit_tests]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4

  #     - name: Download coverage reports
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: coverage

  #     - name: Publish code coverage report
  #       uses: codecov/codecov-action@v4.6.0
  #       with:
  #         token: ${{ secrets.CODECOV_TOKEN }}
  #         files: coverage/**/lcov.info
  #         flags: unittest
  #         name: codecov

  # publish_canary_version:
  #   name: Publish the latest code as a canary version
  #   runs-on: ubuntu-latest
  #   permissions:
  #     id-token: write
  #   needs: [lint_with_build, lint_without_build, unit_tests]
  #   if: github.repository == 'typescript-eslint/typescript-eslint' && github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0 # we need the tags to be available

  #     - name: Install
  #       uses: ./.github/actions/prepare-install
  #       with:
  #         node-version: ${{ env.PRIMARY_NODE_VERSION }}
  #         registry-url: 'https://registry.npmjs.org'

  #     - name: Build
  #       uses: ./.github/actions/prepare-build

  #     - name: Figure out and apply the next canary version
  #       run: npx tsx tools/release/apply-canary-version.mts

  #     - name: Publish all packages to npm with the canary tag
  #       # NOTE: this needs to be npx, rather than yarn, to make sure the authenticated npm registry is used
  #       run: npx nx release publish --tag canary --verbose
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  #         NPM_CONFIG_PROVENANCE: true
